/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ProjectFactoryInterface extends utils.Interface {
  functions: {
    "getDeployedProject()": FunctionFragment;
    "newProject(uint256,string,string)": FunctionFragment;
    "projectAddress(uint256)": FunctionFragment;
    "projectName(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDeployedProject"
      | "newProject"
      | "projectAddress"
      | "projectName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDeployedProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProject",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "projectAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "projectName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDeployedProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectName",
    data: BytesLike
  ): Result;

  events: {
    "CreatedProject(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedProject"): EventFragment;
}

export interface CreatedProjectEventObject {
  projectAddress: string;
}
export type CreatedProjectEvent = TypedEvent<
  [string],
  CreatedProjectEventObject
>;

export type CreatedProjectEventFilter = TypedEventFilter<CreatedProjectEvent>;

export interface ProjectFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDeployedProject(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    newProject(
      minimum: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projectAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectName(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getDeployedProject(overrides?: CallOverrides): Promise<[string[], string[]]>;

  newProject(
    minimum: PromiseOrValue<BigNumberish>,
    details: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projectAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  projectName(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getDeployedProject(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    newProject(
      minimum: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    projectAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    projectName(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CreatedProject(address)"(projectAddress?: null): CreatedProjectEventFilter;
    CreatedProject(projectAddress?: null): CreatedProjectEventFilter;
  };

  estimateGas: {
    getDeployedProject(overrides?: CallOverrides): Promise<BigNumber>;

    newProject(
      minimum: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    projectAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectName(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDeployedProject(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newProject(
      minimum: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projectAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectName(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
