/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Project {
  export type SummaryStruct = {
    numRequests: PromiseOrValue<BigNumberish>;
    minContribution: PromiseOrValue<BigNumberish>;
    contributersCount: PromiseOrValue<BigNumberish>;
    projectDetails: PromiseOrValue<string>;
    projectName: PromiseOrValue<string>;
    manager: PromiseOrValue<string>;
  };

  export type SummaryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    numRequests: BigNumber;
    minContribution: BigNumber;
    contributersCount: BigNumber;
    projectDetails: string;
    projectName: string;
    manager: string;
  };
}

export interface ProjectInterface extends utils.Interface {
  functions: {
    "Contribute()": FunctionFragment;
    "approveRequest(uint256)": FunctionFragment;
    "contributersCount()": FunctionFragment;
    "createRequest(string,uint256,address)": FunctionFragment;
    "finishRequest(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getNumRequest()": FunctionFragment;
    "getSummary()": FunctionFragment;
    "manager()": FunctionFragment;
    "minContribution()": FunctionFragment;
    "projectDetails()": FunctionFragment;
    "projectName()": FunctionFragment;
    "projectSummary(uint256)": FunctionFragment;
    "requests(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Contribute"
      | "approveRequest"
      | "contributersCount"
      | "createRequest"
      | "finishRequest"
      | "getBalance"
      | "getNumRequest"
      | "getSummary"
      | "manager"
      | "minContribution"
      | "projectDetails"
      | "projectName"
      | "projectSummary"
      | "requests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSummary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectSummary",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "Contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSummary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;

  events: {};
}

export interface Project extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    createRequest(
      description: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumRequest(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSummary(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    minContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    projectDetails(overrides?: CallOverrides): Promise<[string]>;

    projectName(overrides?: CallOverrides): Promise<[string]>;

    projectSummary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string] & {
        numRequests: BigNumber;
        minContribution: BigNumber;
        contributersCount: BigNumber;
        projectDetails: string;
        projectName: string;
        manager: string;
      }
    >;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        value: BigNumber;
        recipient: string;
        complete: boolean;
        approverCount: BigNumber;
      }
    >;
  };

  Contribute(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveRequest(
    index: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributersCount(overrides?: CallOverrides): Promise<BigNumber>;

  createRequest(
    description: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishRequest(
    index: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNumRequest(overrides?: CallOverrides): Promise<BigNumber>;

  getSummary(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  minContribution(overrides?: CallOverrides): Promise<BigNumber>;

  projectDetails(overrides?: CallOverrides): Promise<string>;

  projectName(overrides?: CallOverrides): Promise<string>;

  projectSummary(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string] & {
      numRequests: BigNumber;
      minContribution: BigNumber;
      contributersCount: BigNumber;
      projectDetails: string;
      projectName: string;
      manager: string;
    }
  >;

  requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, BigNumber] & {
      description: string;
      value: BigNumber;
      recipient: string;
      complete: boolean;
      approverCount: BigNumber;
    }
  >;

  callStatic: {
    Contribute(overrides?: CallOverrides): Promise<void>;

    approveRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contributersCount(overrides?: CallOverrides): Promise<BigNumber>;

    createRequest(
      description: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNumRequest(overrides?: CallOverrides): Promise<BigNumber>;

    getSummary(
      overrides?: CallOverrides
    ): Promise<Project.SummaryStructOutput[]>;

    manager(overrides?: CallOverrides): Promise<string>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    projectDetails(overrides?: CallOverrides): Promise<string>;

    projectName(overrides?: CallOverrides): Promise<string>;

    projectSummary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string] & {
        numRequests: BigNumber;
        minContribution: BigNumber;
        contributersCount: BigNumber;
        projectDetails: string;
        projectName: string;
        manager: string;
      }
    >;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        value: BigNumber;
        recipient: string;
        complete: boolean;
        approverCount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    Contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributersCount(overrides?: CallOverrides): Promise<BigNumber>;

    createRequest(
      description: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNumRequest(overrides?: CallOverrides): Promise<BigNumber>;

    getSummary(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    projectDetails(overrides?: CallOverrides): Promise<BigNumber>;

    projectName(overrides?: CallOverrides): Promise<BigNumber>;

    projectSummary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createRequest(
      description: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishRequest(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSummary(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectSummary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
